from django.core.management.base import BaseCommand
from accounts.models import User
from api.models import Restaurant


class Command(BaseCommand):
    help = 'Sync User roles with Restaurant types'

    def handle(self, *args, **options):
        self.stdout.write("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô...")
        
        mismatched_count = 0
        fixed_count = 0
        
        for user in User.objects.filter(role__in=['general_restaurant', 'special_restaurant']):
            try:
                restaurant = user.restaurant
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                role_matches = (
                    (user.role == 'special_restaurant' and restaurant.is_special) or
                    (user.role == 'general_restaurant' and not restaurant.is_special)
                )
                
                if not role_matches:
                    mismatched_count += 1
                    old_role = user.role
                    new_role = 'special_restaurant' if restaurant.is_special else 'general_restaurant'
                    
                    self.stdout.write(
                        f"‚ùå {user.username} (ID: {user.id})\n"
                        f"   User Role: {old_role}\n"
                        f"   Restaurant: {restaurant.restaurant_name}\n"
                        f"   Is Special: {restaurant.is_special}\n"
                        f"   Should be: {new_role}"
                    )
                    
                    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    user.role = new_role
                    user.save()
                    fixed_count += 1
                    
                    self.stdout.write(
                        self.style.SUCCESS(f"   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô: {new_role}")
                    )
                    self.stdout.write("---")
                    
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è User {user.username} ‡∏°‡∏µ role {user.role} ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô: {e}")
                )
        
        if mismatched_count == 0:
            self.stdout.write(
                self.style.SUCCESS("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f"\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß {fixed_count}/{mismatched_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            )
        
        self.stdout.write("\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ refresh ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô browser") 