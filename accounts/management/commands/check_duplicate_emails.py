from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db.models import Count
from collections import defaultdict

User = get_user_model()

class Command(BaseCommand):
    help = 'Check and handle duplicate emails before making email field unique'

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='Automatically fix duplicate emails by appending numbers',
        )
        parser.add_argument(
            '--delete-duplicates',
            action='store_true',
            help='Delete newer duplicate accounts (DANGEROUS - use with caution)',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
        
        # ‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (case-insensitive)
        duplicates = self.find_duplicate_emails()
        
        if not duplicates:
            self.stdout.write(
                self.style.SUCCESS("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô migration ‡πÑ‡∏î‡πâ")
            )
            return
        
        self.stdout.write(
            self.style.WARNING(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ {len(duplicates)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        )
        
        total_duplicates = 0
        for email, users in duplicates.items():
            total_duplicates += len(users) - 1  # ‡∏•‡∏ö 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥
            self.stdout.write(f"  üìß {email}: {len(users)} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
            for i, user in enumerate(users):
                status = "üîµ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ" if i == 0 else "üî¥ ‡∏ã‡πâ‡∏≥"
                self.stdout.write(f"    {status} ID:{user.id} - {user.username} (‡∏™‡∏£‡πâ‡∏≤‡∏á: {user.date_joined})")
        
        self.stdout.write(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_duplicates} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
        
        if options['fix']:
            self.fix_duplicate_emails(duplicates)
        elif options['delete_duplicates']:
            self.delete_duplicate_accounts(duplicates)
        else:
            self.stdout.write(
                self.style.WARNING(
                    "\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n"
                    "  ‚Ä¢ ‡∏£‡∏±‡∏ô --fix ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç\n"
                    "  ‚Ä¢ ‡∏£‡∏±‡∏ô --delete-duplicates ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥ (‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢!)\n"
                    "  ‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô Admin panel"
                )
            )

    def find_duplicate_emails(self):
        """‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô"""
        duplicates = defaultdict(list)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (case-insensitive)
        all_users = User.objects.all().order_by('date_joined')
        
        for user in all_users:
            if user.email:
                email_lower = user.email.lower()
                duplicates[email_lower].append(user)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        return {email: users for email, users in duplicates.items() if len(users) > 1}

    def fix_duplicate_emails(self, duplicates):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç"""
        self.stdout.write("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥...")
        
        fixed_count = 0
        for email, users in duplicates.items():
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏£‡∏Å (‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡πÑ‡∏ß‡πâ
            original_user = users[0]
            self.stdout.write(f"  ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ: {original_user.username} - {original_user.email}")
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            for i, user in enumerate(users[1:], 1):
                old_email = user.email
                new_email = f"{email.split('@')[0]}.{i}@{email.split('@')[1]}"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                counter = i
                while User.objects.filter(email__iexact=new_email).exists():
                    counter += 1
                    new_email = f"{email.split('@')[0]}.{counter}@{email.split('@')[1]}"
                
                user.email = new_email
                user.save()
                
                self.stdout.write(f"  üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: {user.username} - {old_email} ‚Üí {new_email}")
                fixed_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô {fixed_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        )

    def delete_duplicate_accounts(self, duplicates):
        """‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏£‡∏Å)"""
        self.stdout.write(
            self.style.ERROR("‚ö†Ô∏è ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)")
        )
        
        deleted_count = 0
        for email, users in duplicates.items():
            original_user = users[0]
            self.stdout.write(f"  ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ: {original_user.username} - {original_user.email}")
            
            for user in users[1:]:
                self.stdout.write(f"  üóëÔ∏è ‡∏•‡∏ö: {user.username} - {user.email}")
                user.delete()
                deleted_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        ) 