from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
import uuid

class User(AbstractUser):
    ROLE_CHOICES = [
        ('admin', 'Admin'),
        ('special_restaurant', 'Special Restaurant'),
        ('general_restaurant', 'General Restaurant'),
        ('customer', 'Customer'),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='customer')
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    address = models.CharField(max_length=255, blank=True, null=True)
    
    # Override email field to make it unique and required
    email = models.EmailField(
        verbose_name='email address',
        unique=True,
        blank=False,
        null=False,
        help_text='Required. Enter a valid email address.',
        error_messages={
            'unique': "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô",
        }
    )
    
    # Email verification fields
    is_email_verified = models.BooleanField(default=False)
    email_verification_token = models.UUIDField(default=uuid.uuid4, editable=False)
    email_verification_sent_at = models.DateTimeField(null=True, blank=True)
    
    # Google OAuth field
    google_id = models.CharField(max_length=255, blank=True, null=True, unique=True)

    def save(self, *args, **kwargs):
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô superuser ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á role ‡πÄ‡∏õ‡πá‡∏ô admin ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if self.is_superuser:
            self.role = 'admin'
            self.is_email_verified = True
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°)
        if self.email:
            existing_user = User.objects.filter(email__iexact=self.email).exclude(pk=self.pk).first()
            if existing_user:
                from django.core.exceptions import ValidationError
                raise ValidationError({'email': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô'})
                
        super().save(*args, **kwargs)

    def clean(self):
        """Validate model fields"""
        super().clean()
        if self.email:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö case-insensitive
            existing_user = User.objects.filter(email__iexact=self.email).exclude(pk=self.pk).first()
            if existing_user:
                from django.core.exceptions import ValidationError
                raise ValidationError({'email': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô'})

    def __str__(self):
        return self.username 

# Signals ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
@receiver(post_save, sender=User)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á authentication token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô superuser"""
    if created or instance.is_superuser:
        Token.objects.get_or_create(user=instance)
        
        # Log ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö superuser
        if instance.is_superuser:
            print(f"üîë Token created for superuser: {instance.username}")

@receiver(post_save, sender=User)
def ensure_superuser_privileges(sender, instance=None, **kwargs):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ superuser ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    if instance.is_superuser:
        updated = False
        
        # ‡∏ï‡∏±‡πâ‡∏á role ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
        if instance.role != 'admin':
            instance.role = 'admin'
            updated = True
            
        # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        if not instance.is_email_verified:
            instance.is_email_verified = True
            updated = True
            
        # ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô staff ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
        if not instance.is_staff:
            instance.is_staff = True
            updated = True
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô recursive save)
        if updated:
            instance.__class__.objects.filter(pk=instance.pk).update(
                role=instance.role,
                is_email_verified=instance.is_email_verified,
                is_staff=instance.is_staff
            )
            print(f"üëë Superuser privileges updated for: {instance.username}") 